// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleMaintenanceInvoiceSystem.Data;

#nullable disable

namespace VehicleMaintenanceInvoiceSystem.Migrations
{
    [DbContext(typeof(InvoiceDbContext))]
    partial class InvoiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.InvoiceHeader", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceID"));

                    b.Property<string>("BlobFileUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ExtractedData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Odometer")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalLaborCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPartsCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VehicleID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InvoiceID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_InvoiceHeader_CreatedAt");

                    b.HasIndex("InvoiceDate")
                        .HasDatabaseName("IX_InvoiceHeader_InvoiceDate");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_InvoiceHeader_InvoiceNumber");

                    b.HasIndex("VehicleID")
                        .HasDatabaseName("IX_InvoiceHeader_VehicleID");

                    b.ToTable("InvoiceHeader", null, t =>
                        {
                            t.HasCheckConstraint("CK_InvoiceHeader_ConfidenceScore", "ConfidenceScore IS NULL OR (ConfidenceScore >= 0 AND ConfidenceScore <= 100)");

                            t.HasCheckConstraint("CK_InvoiceHeader_Odometer", "Odometer IS NULL OR Odometer >= 0");

                            t.HasCheckConstraint("CK_InvoiceHeader_TotalCost", "TotalCost >= 0");

                            t.HasCheckConstraint("CK_InvoiceHeader_TotalLaborCost", "TotalLaborCost >= 0");

                            t.HasCheckConstraint("CK_InvoiceHeader_TotalPartsCost", "TotalPartsCost >= 0");
                        });
                });

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.InvoiceLine", b =>
                {
                    b.Property<int>("LineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LineID"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("PartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalLineCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("LineID");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_InvoiceLines_Category");

                    b.HasIndex("InvoiceID")
                        .HasDatabaseName("IX_InvoiceLines_InvoiceID");

                    b.HasIndex("PartNumber")
                        .HasDatabaseName("IX_InvoiceLines_PartNumber");

                    b.HasIndex("InvoiceID", "LineNumber")
                        .HasDatabaseName("IX_InvoiceLines_InvoiceID_LineNumber");

                    b.ToTable("InvoiceLines", null, t =>
                        {
                            t.HasCheckConstraint("CK_InvoiceLines_ConfidenceScore", "ConfidenceScore IS NULL OR (ConfidenceScore >= 0 AND ConfidenceScore <= 100)");

                            t.HasCheckConstraint("CK_InvoiceLines_LineNumber", "LineNumber > 0");

                            t.HasCheckConstraint("CK_InvoiceLines_Quantity", "Quantity > 0");

                            t.HasCheckConstraint("CK_InvoiceLines_TotalLineCost", "TotalLineCost >= 0");

                            t.HasCheckConstraint("CK_InvoiceLines_UnitCost", "UnitCost >= 0");
                        });
                });

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.InvoiceLine", b =>
                {
                    b.HasOne("VehicleMaintenanceInvoiceSystem.Models.InvoiceHeader", "InvoiceHeader")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceHeader");
                });

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.InvoiceHeader", b =>
                {
                    b.Navigation("InvoiceLines");
                });
#pragma warning restore 612, 618
        }
    }
}
