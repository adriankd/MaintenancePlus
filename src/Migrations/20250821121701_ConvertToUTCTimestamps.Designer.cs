// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleMaintenanceInvoiceSystem.Data;

#nullable disable

namespace VehicleMaintenanceInvoiceSystem.Migrations
{
    [DbContext(typeof(InvoiceDbContext))]
    [Migration("20250821121701_ConvertToUTCTimestamps")]
    partial class ConvertToUTCTimestamps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.ClassificationAccuracyLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<decimal>("AccuracyPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("AverageConfidence")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ClassificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CorrectClassifications")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("DatePeriod")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedbackCount")
                        .HasColumnType("int");

                    b.Property<string>("ModelVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TotalClassifications")
                        .HasColumnType("int");

                    b.HasKey("LogID");

                    b.HasIndex("ClassificationType")
                        .HasDatabaseName("IX_ClassificationAccuracyLog_ClassificationType");

                    b.HasIndex("DatePeriod")
                        .HasDatabaseName("IX_ClassificationAccuracyLog_DatePeriod");

                    b.HasIndex("ModelVersion")
                        .HasDatabaseName("IX_ClassificationAccuracyLog_ModelVersion");

                    b.ToTable("ClassificationAccuracyLog", (string)null);
                });

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.ClassificationFeedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<bool>("Applied")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectedClassification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FeedbackDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<int>("LineID")
                        .HasColumnType("int");

                    b.Property<string>("ModelVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OriginalClassification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("OriginalConfidence")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("UserComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("FeedbackDate")
                        .HasDatabaseName("IX_ClassificationFeedback_FeedbackDate");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("LineID")
                        .HasDatabaseName("IX_ClassificationFeedback_LineID");

                    b.HasIndex("UserID")
                        .HasDatabaseName("IX_ClassificationFeedback_UserID");

                    b.ToTable("ClassificationFeedback", (string)null);
                });

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.FieldNormalizationFeedback", b =>
                {
                    b.Property<int>("NormalizationFeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NormalizationFeedbackID"));

                    b.Property<bool>("Applied")
                        .HasColumnType("bit");

                    b.Property<string>("CurrentNormalization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExpectedNormalization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FeedbackDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<string>("NormalizationVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OriginalLabel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("NormalizationFeedbackID");

                    b.HasIndex("FeedbackDate")
                        .HasDatabaseName("IX_FieldNormalizationFeedback_FeedbackDate");

                    b.HasIndex("FieldType")
                        .HasDatabaseName("IX_FieldNormalizationFeedback_FieldType");

                    b.HasIndex("InvoiceID")
                        .HasDatabaseName("IX_FieldNormalizationFeedback_InvoiceID");

                    b.HasIndex("UserID")
                        .HasDatabaseName("IX_FieldNormalizationFeedback_UserID");

                    b.ToTable("FieldNormalizationFeedback", (string)null);
                });

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.InvoiceHeader", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceID"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BlobFileUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ExtractedData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizationVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Odometer")
                        .HasColumnType("int");

                    b.Property<string>("OriginalInvoiceLabel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OriginalOdometerLabel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OriginalVehicleLabel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalLaborCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPartsCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VehicleID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InvoiceID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_InvoiceHeader_CreatedAt");

                    b.HasIndex("InvoiceDate")
                        .HasDatabaseName("IX_InvoiceHeader_InvoiceDate");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_InvoiceHeader_InvoiceNumber");

                    b.HasIndex("VehicleID")
                        .HasDatabaseName("IX_InvoiceHeader_VehicleID");

                    b.ToTable("InvoiceHeader", null, t =>
                        {
                            t.HasCheckConstraint("CK_InvoiceHeader_ConfidenceScore", "ConfidenceScore IS NULL OR (ConfidenceScore >= 0 AND ConfidenceScore <= 100)");

                            t.HasCheckConstraint("CK_InvoiceHeader_Odometer", "Odometer IS NULL OR Odometer >= 0");

                            t.HasCheckConstraint("CK_InvoiceHeader_TotalCost", "TotalCost >= 0");

                            t.HasCheckConstraint("CK_InvoiceHeader_TotalLaborCost", "TotalLaborCost >= 0");

                            t.HasCheckConstraint("CK_InvoiceHeader_TotalPartsCost", "TotalPartsCost >= 0");
                        });
                });

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.InvoiceLine", b =>
                {
                    b.Property<int>("LineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LineID"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("ClassificationConfidence")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ClassificationMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassificationVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ClassifiedCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ExtractionConfidence")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("OriginalCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalLineCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("LineID");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_InvoiceLines_Category");

                    b.HasIndex("InvoiceID")
                        .HasDatabaseName("IX_InvoiceLines_InvoiceID");

                    b.HasIndex("PartNumber")
                        .HasDatabaseName("IX_InvoiceLines_PartNumber");

                    b.HasIndex("InvoiceID", "LineNumber")
                        .HasDatabaseName("IX_InvoiceLines_InvoiceID_LineNumber");

                    b.ToTable("InvoiceLines", null, t =>
                        {
                            t.HasCheckConstraint("CK_InvoiceLines_ClassificationConfidence", "ClassificationConfidence IS NULL OR (ClassificationConfidence >= 0 AND ClassificationConfidence <= 100)");

                            t.HasCheckConstraint("CK_InvoiceLines_ExtractionConfidence", "ExtractionConfidence IS NULL OR (ExtractionConfidence >= 0 AND ExtractionConfidence <= 100)");

                            t.HasCheckConstraint("CK_InvoiceLines_LineNumber", "LineNumber > 0");

                            t.HasCheckConstraint("CK_InvoiceLines_Quantity", "Quantity > 0");

                            t.HasCheckConstraint("CK_InvoiceLines_TotalLineCost", "TotalLineCost >= 0");

                            t.HasCheckConstraint("CK_InvoiceLines_UnitCost", "UnitCost >= 0");
                        });
                });

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.ClassificationFeedback", b =>
                {
                    b.HasOne("VehicleMaintenanceInvoiceSystem.Models.InvoiceHeader", "InvoiceHeader")
                        .WithMany()
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VehicleMaintenanceInvoiceSystem.Models.InvoiceLine", "InvoiceLine")
                        .WithMany("ClassificationFeedbacks")
                        .HasForeignKey("LineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceHeader");

                    b.Navigation("InvoiceLine");
                });

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.FieldNormalizationFeedback", b =>
                {
                    b.HasOne("VehicleMaintenanceInvoiceSystem.Models.InvoiceHeader", "InvoiceHeader")
                        .WithMany("FieldNormalizationFeedbacks")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceHeader");
                });

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.InvoiceLine", b =>
                {
                    b.HasOne("VehicleMaintenanceInvoiceSystem.Models.InvoiceHeader", "InvoiceHeader")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceHeader");
                });

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.InvoiceHeader", b =>
                {
                    b.Navigation("FieldNormalizationFeedbacks");

                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("VehicleMaintenanceInvoiceSystem.Models.InvoiceLine", b =>
                {
                    b.Navigation("ClassificationFeedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
